@using AppelsDOffresApp.ViewModels
@model AppelsDOffresApp.ViewModels.DocumentViewModel

@{
    ViewData["Title"] = "Add Document";
}

<h1>Add Document</h1>

<form asp-action="Create" enctype="multipart/form-data">
    <input type="hidden" asp-for="AppelDOffreId" value="@ViewBag.AppelOffreId" />

    <div class="form-group">
        <label asp-for="Nom" class="control-label"></label>
        <input asp-for="Nom" class="form-control" />
        <span asp-validation-for="Nom" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="DateLimite" class="control-label">Date Limite</label>
        <input asp-for="DateLimite" class="form-control" type="date" />
        <span asp-validation-for="DateLimite" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="Type" class="control-label"></label>
        <select asp-for="Type" class="form-control">
            @foreach (var type in Enum.GetValues(typeof(DocumentType)))
            {
                <option value="@type">@type</option>
            }
        </select>
        <span asp-validation-for="Type" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="UploadedFile" class="control-label"></label>
        <input asp-for="UploadedFile" class="form-control-file" />
        <span asp-validation-for="UploadedFile" class="text-danger"></span>
    </div>

    <div class="form-group">
        <input type="submit" value="Add Document" class="btn btn-primary" />
    </div>
</form>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
